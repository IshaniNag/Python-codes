def evaluate_expression(expression):
    operators = {'+': lambda x, y: x + y,
                 '-': lambda x, y: x - y,
                 '*': lambda x, y: x * y,
                 '/': lambda x, y: x / y}

    def precedence(op):
        if op in ['+', '-']:
            return 1
        elif op in ['*', '/']:
            return 2
        return 0

    def apply_operation(operands, operators):
        while len(operands) > 1 and len(operators) > 0:
            op = operators.pop()
            right_operand = operands.pop()
            left_operand = operands.pop()
            operands.append(op(left_operand, right_operand))
    
    operands = []
    operator_stack = []

    i = 0
    while i < len(expression):
        if expression[i].isdigit():
            operand = 0
            while i < len(expression) and expression[i].isdigit():
                operand = operand * 10 + int(expression[i])
                i += 1
            operands.append(operand)
            continue
        elif expression[i] in operators:
            while (len(operator_stack) > 0 and
                   precedence(operator_stack[-1]) >= precedence(expression[i])):
                apply_operation(operands, operator_stack)
            operator_stack.append(operators[expression[i]])
        elif expression[i] == '(':
            operator_stack.append(expression[i])
        elif expression[i] == ')':
            while operator_stack[-1] != '(':
                apply_operation(operands, operator_stack)
            operator_stack.pop()
        i += 1

    while len(operator_stack) > 0:
        apply_operation(operands, operator_stack)

    return operands[0]

def main():
    expression = input("Enter a mathematical expression: ")
    result = evaluate_expression(expression)
    print("Result:", result)

if __name__ == "__main__":
main()
